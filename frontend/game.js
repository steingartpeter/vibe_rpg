const API_URL = "/vibe_rpg/backend/api.php"; // A PHP API v√©gpontod el√©r√©si √∫tja
let activeCharacter = null;

const MAP_SIZE = 12; // 12x12-es t√©rk√©p
const TILE_TYPES = {
  erdo: { color: "#228B22", resource: "Fa", combat_chance: 30 },
  mezo: { color: "#8FBC8F", resource: "Gy√≥gyn√∂v√©ny", combat_chance: 15 },
  homok: { color: "#F0E68C", resource: "Kavics", combat_chance: 5 },
  tisztas: { color: "#90EE90", resource: "Bogy√≥", combat_chance: 10 },
  sziklas: { color: "#A9A9A9", resource: "K≈ë", combat_chance: 40 },
  mocs√°r: { color: "#556B2F", resource: "Iszap", combat_chance: 50 },
  viz: { color: "#4682B4", resource: null, combat_chance: 0 }, // Nem j√°rhat√≥
};
const TILE_KEYS = Object.keys(TILE_TYPES); // ['erdo', 'mezo', ...]

let currentMap = [];

function generateRandomMap() {
  let map = [];
  for (let y = 0; y < MAP_SIZE; y++) {
    let row = [];
    for (let x = 0; x < MAP_SIZE; x++) {
      // V√©letlen cellat√≠pus kiv√°laszt√°sa
      const randomType =
        TILE_KEYS[Math.floor(Math.random() * TILE_KEYS.length)];
      row.push(randomType);
    }
    map.push(row);
  }
  // A kezd≈ëcella mindig 'tiszt√°s' legyen a biztons√°g kedv√©√©rt (pl. [0, 0])
  map[activeCharacter.pos_y][activeCharacter.pos_x] = "tisztas";
  currentMap = map;
}

function renderMap() {
  const container = document.getElementById("main-map");
  container.innerHTML = ""; // El≈ëz≈ë t√©rk√©p t√∂rl√©se

  currentMap.forEach((row, y) => {
    row.forEach((type, x) => {
      const cell = document.createElement("div");
      cell.className = "map-cell";

      // CSS be√°ll√≠t√°s a TILE_TYPES alapj√°n
      cell.style.backgroundColor = TILE_TYPES[type].color;
      cell.style.width = "30px";
      cell.style.height = "30px";

      // Karakter ikon megjelen√≠t√©se
      if (activeCharacter.pos_x === x && activeCharacter.pos_y === y) {
        cell.textContent = "üö∂"; // Karakter ikon
        cell.style.fontSize = "20px";
        cell.style.textAlign = "center";
      }

      // J√°rhat√≥s√°g jelz√©se (pl. v√≠z)
      if (type === "viz") {
        cell.style.opacity = 0.5;
      }

      container.appendChild(cell);
    });
  });
}

// 1. API h√≠v√°s funkci√≥ (v√°ltozatlan)
async function callApi(action, data = {}) {
  const payload = { action, ...data };

  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    console.log(response);
    return response.json();
  } catch (error) {
    console.error("API hiba:", error);
    document.getElementById("message").textContent =
      "Kommunik√°ci√≥s hiba a szerverrel.";
    return { status: "error", message: "H√°l√≥zati hiba." };
  }
}

// 2. J√°t√©k bet√∂lt√©se √©s inicializ√°l√°sa (v√°ltozatlan)
async function loadGame() {
  const nev = document.getElementById("characterName").value.trim();
  if (!nev) {
    document.getElementById("message").textContent =
      "K√©rlek adj meg egy nevet.";
    return;
  }

  // T√∂r√∂lj√ºk a kor√°bbi hiba√ºzenetet
  document.getElementById("message").textContent = "";

  const result = await callApi("load_character", { nev: nev });

  if (result.status === "ok") {
    activeCharacter = result.karakter;
    generateRandomMap();
    renderMap();
    updateGameUI();
    document.getElementById("login").style.display = "none";
    document.getElementById("game").style.display = "block";
    addToLog(
      `√údv√∂z√∂llek ${activeCharacter.nev}! Sikeresen bet√∂ltve. Energia: ${activeCharacter.energia}.`
    );
  } else {
    document.getElementById("message").textContent = result.message;
  }
}

// 3. Fel√ºlet friss√≠t√©se (v√°ltozatlan)
function updateGameUI() {
  if (activeCharacter) {
    const xpNeeded = activeCharacter.szint * 100;

    document.getElementById("stats").textContent =
      `N√©v: ${activeCharacter.nev}\n` +
      `Szint: ${activeCharacter.szint}\n` +
      `XP: ${activeCharacter.xp} / ${xpNeeded} (k√∂vetkez≈ë szintig)\n` +
      `Energia: ${activeCharacter.energia} / 100\n` +
      `Kioszthat√≥ Skill Pontok: ${activeCharacter.skill_pontok}\n` + // √öJ
      `Gy≈±jt≈ë Skill: ${activeCharacter.gyujto_skill}\n` +
      `Harc Skill: ${activeCharacter.harc_skill}\n` +
      `Poz√≠ci√≥: (${activeCharacter.pos_x}, ${activeCharacter.pos_y})`;

    updateInventoryDisplay();

    // Megjelen√≠tj√ºk a skill kioszt√≥ fel√ºletet, ha van pont
    updateSkillAllocationUI(activeCharacter.skill_pontok);
  }
}

// 4. Esem√©nynapl√≥hoz ad√°s (v√°ltozatlan)
function addToLog(text) {
  const logDiv = document.getElementById("log");
  logDiv.innerHTML =
    `<div>[${new Date().toLocaleTimeString()}] ${text}</div>` +
    logDiv.innerHTML;
}

// 5. TEV√âKENYS√âG IND√çT√ÅSA (FRISS√çT√âS!)
async function doActivity(type) {
  if (!activeCharacter) return;
  console.log("ACTIVITY: " + type);
  // A gombokat letiltjuk, am√≠g a k√©r√©sre v√°runk
  toggleActivityButtons(true);

  const result = await callApi("do_activity", {
    nev: activeCharacter.nev, // Fontos: el kell k√ºldeni a karakter nev√©t
    type: type, // collect, combat, vagy rest
  });

  if (result.status === "ok") {
    // Friss√≠tj√ºk a karaktert a szerverr≈ël kapott adatokkal
    activeCharacter = result.karakter;

    // √úzenet a logba
    addToLog(`**${type.toUpperCase()}** - ${result.message}`);

    // Friss√≠tj√ºk a kijelz≈ët
    updateGameUI();

    // Szintl√©p√©s ellen≈ërz√©se
    checkLevelUp(activeCharacter.szint);
  } else {
    // Hiba eset√©n (pl. kev√©s energia)
    addToLog(`Hiba: ${result.message}`);
  }

  // Enged√©lyezz√ºk a gombokat
  toggleActivityButtons(false);
}

// 6. SZINTL√âP√âS LOGIKA (frontend oldali megjelen√≠t√©s)
function checkLevelUp(newLevel) {
  const currentLevel = activeCharacter.szint;
  // B√°r a PHP-ban m√©g nincs implement√°lva a szintl√©p√©s (csak az XP n≈ë),
  // √©rdemes el≈ëk√©sz√≠teni a logik√°t:

  // Ha az XP meghalad egy bizonyos k√ºsz√∂b√∂t, a szerver n√∂veli a szintet.
  // Tegy√ºk fel, hogy a szerver m√°r megn√∂velte a szintet, √©s mi csak ellen≈ërizz√ºk.
  if (newLevel > currentLevel) {
    addToLog(
      `*** GRATUL√ÅLOK! ${activeCharacter.nev} szintet l√©pett! √öj szint: ${newLevel} ***`
    );
    // Itt j√∂nne a ponteloszt√°s UI, amit k√©s≈ëbb hozz√°adhatunk
  }
}

// 7. Gombok letilt√°sa/enged√©lyez√©se a k√©r√©s ideje alatt
function toggleActivityButtons(disable) {
  document.querySelector("button[onclick=\"doActivity('collect')\"]").disabled =
    disable;
  document.querySelector("button[onclick=\"doActivity('combat')\"]").disabled =
    disable;
  document.querySelector("button[onclick=\"doActivity('rest')\"]").disabled =
    disable;
}

// game.js - a t√∂bbi f√ºggv√©ny ut√°n
function updateSkillAllocationUI(points) {
  const allocationDiv = document.getElementById("skillAllocation");
  document.getElementById("skillPointsRemaining").textContent = points;

  if (points > 0) {
    allocationDiv.style.display = "block";
  } else {
    allocationDiv.style.display = "none";
  }
}

// game.js - √∫j f√ºggv√©ny a skill pont kioszt√°s√°ra
async function allocatePoint(skillType) {
  if (!activeCharacter || activeCharacter.skill_pontok < 1) {
    addToLog("Nincs el√©g skill pont a kioszt√°shoz.");
    return;
  }

  // Gombok letilt√°sa, am√≠g a k√©r√©sre v√°runk
  toggleActivityButtons(true);

  const result = await callApi("allocate_skill_point", {
    nev: activeCharacter.nev,
    skill_type: skillType,
  });

  if (result.status === "ok") {
    activeCharacter = result.karakter;
    updateGameUI();
    addToLog(result.message);
  } else {
    addToLog(`Hiba a skill kioszt√°skor: ${result.message}`);
  }

  toggleActivityButtons(false);
}

// B≈ëv√≠tsd ki a toggleActivityButtons f√ºggv√©nyt, hogy a skill gombokat is kezelje
function toggleActivityButtons(disable) {
  // ... megl√©v≈ë aktivit√°s gombok letilt√°sa
  document.querySelector("button[onclick=\"doActivity('collect')\"]").disabled =
    disable;
  document.querySelector("button[onclick=\"doActivity('combat')\"]").disabled =
    disable;
  document.querySelector("button[onclick=\"doActivity('rest')\"]").disabled =
    disable;

  // √öJ: Skill kioszt√≥ gombok letilt√°sa is
  document.querySelector(
    "button[onclick=\"allocatePoint('gyujto')\"]"
  ).disabled = disable;
  document.querySelector("button[onclick=\"allocatePoint('harc')\"]").disabled =
    disable;
}

// game.js
async function moveCharacter(deltaX, deltaY) {
  if (!activeCharacter) return;

  toggleActivityButtons(true);

  const result = await callApi("move_character", {
    nev: activeCharacter.nev,
    delta_x: deltaX,
    delta_y: deltaY,
  });

  if (result.status === "ok") {
    activeCharacter = result.karakter;

    // Friss√≠tj√ºk a kijelz≈ët √©s a t√©rk√©pet
    updateGameUI();
    renderMap();

    // Mivel √∫j helyre √©rkezt√ºnk, az adott cella t√≠pusa is kell:
    const currentTileType =
      currentMap[activeCharacter.pos_y][activeCharacter.pos_x];
    addToLog(result.message + ` Az aktu√°lis cella: **${currentTileType}**.`);

    // Itt lehetne ellen≈ërizni, hogy a cella nem j√°rhat√≥ (pl. v√≠z)
    if (currentTileType === "viz") {
      addToLog("Figyelem: Ezt a cell√°t nem j√°rhatod √°t!");
      // K√©s≈ëbb ezt a logik√°t a PHP-ban is ellen≈ërizni kell,
      // √©s vissza kell vonni a mozg√°st, ha nem j√°rhat√≥.
    }
  } else {
    addToLog(`Hiba a mozg√°skor: ${result.message}`);
  }

  toggleActivityButtons(false);
}

function updateInventoryDisplay() {
  // Haszn√°ljuk az √∫j ID-t a MOD√ÅLON bel√ºl: 'inventoryDisplayContent'
  const invDiv = document.getElementById('inventoryDisplayContent');
  let invText = '';
  
  const inventory = activeCharacter.inventory;
  const items = Object.keys(inventory);

  if (items.length > 0) {
      items.forEach(item => {
          if (inventory[item] > 0) {
              invText += `${item}: ${inventory[item]} db\n`;
          }
      });
  } else {
      invText = 'A k√©szleted √ºres.';
  }
  
  invDiv.textContent = invText;
}

function toggleInventoryModal() {
  const modal = document.getElementById('inventoryModal');
  
  if (modal.style.display === 'block') {
      // Elrejt√©s
      modal.style.display = 'none';
  } else {
      // Megjelen√≠t√©s √©s a tartalom friss√≠t√©se (ha sz√ºks√©ges)
      updateInventoryDisplay(); // Biztos√≠tjuk, hogy a legfrissebb adatok jelenjenek meg
      modal.style.display = 'block';
  }
}